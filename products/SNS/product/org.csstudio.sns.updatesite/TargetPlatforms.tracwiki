= Target Platforms =

== 64 Bit ==
Recent Linux and Windows users tend to have 64-bit-only versions of Java, so they need
the 64 bit products.

Oracle Java 7 for Mac OS X is 64 bit.

== Mac OS X ==
Architecture started with {{{os=macosx, ws=carbon, arch=x86}}} for Mac OS X 10.5 and 10.6, then switched to {{{ws=cocoa}}}.
As of CSS 3.2.x, CSS source code requires Java 7.
Oracle provides Java 7 as a JRE, which installs as a web browser plugin,
and as a JDK, which installs such that "java -version" on the command line will report 1.7.

The Eclipse 3.7.2 target launcher, however, does not work with Oracle Java 7.
Options {{{-vm /path/to/jdk1.7/bin/java}}} have no effect.
The launch will fail and configuration/*.log will show that Java 6 is used, whatever you select Java 7:
{{{
java.version=1.6.0_45
java.vendor=Apple Inc.
}}}

Need to start CSS like this:
{{{
java -showversion -XX:MaxPermSize=256m -Xms1024m -Xmx1024m -XstartOnFirstThread -Dorg.eclipse.swt.internal.carbon.smallFonts -Xdock:icon=css.app/Contents/Resources/css.icns -Dosgi.requiredJavaVersion=1.7 -jar plugins/org.eclipse.equinox.launcher_1.2.0.v20110502.jar
}}}

See also http://stackoverflow.com/questions/10352715/how-do-i-run-eclipse-using-oracles-new-1-7-jdk-for-the-mac

Workaround is to patch the generated product with the launcher binary from Eclipse 4.3.1.
By replacing the launcher of the 3.7.2 target platform and delta pack with the corresponding files from Eclipse 4.3.1,
an 'export' or headless build will result in a usable Mac OS X applications:
{{{
# Hack 3.7.2 launcher binary (exe. and shared lib), replace with the one from 4.3.1
cp Eclipse/4.3.1/rcp/Eclipse.app/Contents/MacOS/eclipse \
   Eclipse/3.7.2/delta/features/org.eclipse.equinox.executable_3.5.1.v20111216-1653-7P7NFUIFIbaUcU77s0KQWHw5HZTZ/bin/cocoa/macosx/x86_64/Eclipse.app/Contents/MacOS/launcher

cp Eclipse/4.3.1/rcp/plugins/org.eclipse.equinox.launcher.cocoa.macosx.x86_64_1.1.200.v20130807-1835/eclipse_1508.so \
   Eclipse/3.7.2/delta/plugins/org.eclipse.equinox.launcher.cocoa.macosx.x86_64_1.1.101.v20120109-1504/eclipse_1408.so 

# Since binaries were changed, the associated signage info needs to be removed:
cd Eclipse/3.7.2/delta/plugins/org.eclipse.equinox.launcher.cocoa.macosx.x86_64_1.1.101.v20120109-1504/META-INF
rm ECLIPSE*
# Edit MANIFEST.MF, remove all "SHA1-Digest" entries
}}}

If the development platform is Mac OS, you also need to update the IDE's launcher files.
In practice it is easier to build on Linux and then only update the launcher files in the delta pack.

Before Eclipse 4.3, support for the new Oracle/Open JDK layout also requires manual creation of (empty) Classes directory:
{{{
sudo mkdir /Library/Java/JavaVirtualMachines/jdk1.7.0_17.jdk/Contents/Home/Classes
}}}


== Update from P2 Repository ==
When supporting self-updates from a P2 repository, assert that products will not attempt to update
from for example {{{os=macosx, ws=carbon}}} to {{{ws=cocoa}}},
or from {{{os=macosx, arch=x86}}} to {{{arch=x86_64}}}
The result would be:

 1. Update, running on {{{ws=carbon}}}, removes/disables the old carbon artefacts.
 2. Update then refuses to install the new {{{ws=cocoa}}} artefacts, because it's running as {{{ws=carbon}}}, so the update does not apply.
 3. Result is a defunct setup.


To guard against this, add specific filters to the product plugin, for example 
{{{ (| (osgi.ws=win32) (& (osgi.ws=cocoa)(osgi.arch=x86_64)) (osgi.ws=gtk)) }}}

which prevent installation of this 'latest' product into an existing {{{ws=carbon}}} setup
or a `cocoa` setup on 32 bit.

Users will have to download the new product ZIP file, they cannot use self-update.
